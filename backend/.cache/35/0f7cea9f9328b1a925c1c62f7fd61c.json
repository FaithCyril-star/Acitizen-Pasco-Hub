{"id":"xWLh","dependencies":[{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@opentelemetry\\api\\build\\esm\\metrics\\Metric.js.map","includedInParent":true,"mtime":1672192599354},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\package.json","includedInParent":true,"mtime":1672218648515},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@opentelemetry\\api\\package.json","includedInParent":true,"mtime":1672192593858}],"generated":{"js":"\"use strict\";var e;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ValueType=void 0,exports.ValueType=e,function(e){e[e.INT=0]=\"INT\",e[e.DOUBLE=1]=\"DOUBLE\"}(e||(exports.ValueType=e={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":17}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":19}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":26}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":41}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":49}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":62}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":63}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":70}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":74}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":82}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":97}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":1,"column":99}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":1,"column":107}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":1,"column":117}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":1,"column":119}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":128}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":1,"column":131}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":1,"column":133}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":1,"column":135}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":1,"column":139}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":46,"column":2},"generated":{"line":1,"column":142}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":148}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":150}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":152}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":159}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":47,"column":2},"generated":{"line":1,"column":162}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":1,"column":171}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":172}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":176}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":184}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":194}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":45,"column":21},"generated":{"line":1,"column":196}}],"sources":{"../../../src/metrics/Metric.ts":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<AttributesTypes extends MetricAttributes = MetricAttributes> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<AttributesTypes extends MetricAttributes = MetricAttributes> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<AttributesTypes extends MetricAttributes = MetricAttributes> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n// api.SpanAttributes instead of api.Attributes is used here for api package backward compatibility.\n/**\n * Attributes is a map from string to attribute values.\n *\n * Note: only the own enumerable keys are counted as valid attribute keys.\n */\nexport type MetricAttributes = Attributes;\n\n// api.SpanAttributeValue instead of api.AttributeValue is used here for api package backward compatibility.\n/**\n * Attribute values may be any non-nullish primitive value except an object.\n *\n * null or undefined attribute values are invalid and will result in undefined behavior.\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<AttributesTypes extends MetricAttributes = MetricAttributes> =\n  (observableResult: ObservableResult<AttributesTypes>) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<AttributesTypes extends MetricAttributes = MetricAttributes> =\n  (observableResult: BatchObservableResult<AttributesTypes>) => void | Promise<void>;\n\nexport interface Observable<AttributesTypes extends MetricAttributes = MetricAttributes> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<AttributesTypes extends MetricAttributes=MetricAttributes> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<AttributesTypes extends MetricAttributes=MetricAttributes> = Observable<AttributesTypes>;\nexport type ObservableGauge<AttributesTypes extends MetricAttributes=MetricAttributes> = Observable<AttributesTypes>;\n"},"lineCount":null}},"error":null,"hash":"ba379c06b8f476d34c2fae6f99691ab5","cacheData":{"env":{}}}