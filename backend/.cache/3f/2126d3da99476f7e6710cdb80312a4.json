{"id":"F4ni","dependencies":[{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@opentelemetry\\api\\build\\esm\\diag\\types.js.map","includedInParent":true,"mtime":1672192602969},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\package.json","includedInParent":true,"mtime":1672218648515},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@opentelemetry\\api\\package.json","includedInParent":true,"mtime":1672192593858}],"generated":{"js":"\"use strict\";var e;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.DiagLogLevel=void 0,exports.DiagLogLevel=e,function(e){e[e.NONE=0]=\"NONE\",e[e.ERROR=30]=\"ERROR\",e[e.WARN=50]=\"WARN\",e[e.INFO=60]=\"INFO\",e[e.DEBUG=70]=\"DEBUG\",e[e.VERBOSE=80]=\"VERBOSE\",e[e.ALL=9999]=\"ALL\"}(e||(exports.DiagLogLevel=e={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":0}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":13}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":17}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":19}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":26}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":41}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":49}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":62}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":63}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":70}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":74}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":82}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":100}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":91,"column":1},"generated":{"line":1,"column":102}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":91,"column":1},"generated":{"line":1,"column":110}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":91,"column":1},"generated":{"line":1,"column":123}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":134}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":137}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":139}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":141}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":146}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":1,"column":149}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":156}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":158}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":160}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":166}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":170}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":178}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":180}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":182}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":187}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":191}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":198}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":200}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":202}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":207}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":211}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":1,"column":218}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":1,"column":220}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":1,"column":222}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":1,"column":228}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":81,"column":2},"generated":{"line":1,"column":232}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":1,"column":240}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":1,"column":242}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":1,"column":244}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":1,"column":252}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":1,"column":256}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":1,"column":266}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":1,"column":268}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":1,"column":270}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":1,"column":274}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":1,"column":280}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":1,"column":286}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":287}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":291}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":299}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":312}},{"source":"../../../src/diag/types.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":1,"column":314}}],"sources":{"../../../src/diag/types.ts":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface LoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n  * Set the global DiagLogger and DiagLogLevel.\n  * If a global diag logger is already set, this will override it.\n  *\n  * @param logger - The {@link DiagLogger} instance to set as the default logger.\n  * @param options - A {@link LoggerOptions} object. If not provided, default values will be set.\n  * @returns `true` if the logger was successfully registered, else `false`\n  */\n  setLogger(logger: DiagLogger, options?: LoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n"},"lineCount":null}},"error":null,"hash":"30e6aa20cb067848455b34a851c32cf9","cacheData":{"env":{}}}