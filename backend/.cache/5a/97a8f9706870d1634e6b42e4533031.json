{"id":"X6EI","dependencies":[{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@azure\\core-tracing\\dist-esm\\src\\interfaces.js.map","includedInParent":true,"mtime":1672192580952},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\package.json","includedInParent":true,"mtime":1672218648515},{"name":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@azure\\core-tracing\\package.json","includedInParent":true,"mtime":1672192579339},{"name":"@opentelemetry/api","loc":{"line":3,"column":55,"index":130},"parent":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@azure\\core-tracing\\dist-esm\\src\\interfaces.js","resolved":"C:\\Users\\ACC\\Desktop\\APH\\Acitizen-Pasco-Hub\\backend\\node_modules\\@opentelemetry\\api\\build\\esm\\index.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.context=exports.SpanStatusCode=exports.SpanKind=void 0,exports.getSpan=n,exports.getSpanContext=a,exports.getTracer=s,exports.isSpanContextValid=p,exports.setSpan=r,exports.setSpanContext=o;var t,e=require(\"@opentelemetry/api\");function n(t){return e.trace.getSpan(t)}function r(t,n){return e.trace.setSpan(t,n)}function o(t,n){return e.trace.setSpanContext(t,n)}function a(t){return e.trace.getSpanContext(t)}function p(t){return e.trace.isSpanContextValid(t)}function s(t,n){return e.trace.getTracer(t||\"azure/core-tracing\",n)}exports.SpanKind=t,function(t){t[t.INTERNAL=0]=\"INTERNAL\",t[t.SERVER=1]=\"SERVER\",t[t.CLIENT=2]=\"CLIENT\",t[t.PRODUCER=3]=\"PRODUCER\",t[t.CONSUMER=4]=\"CONSUMER\"}(t||(exports.SpanKind=t={}));const S=e.context;var c;exports.context=S,exports.SpanStatusCode=c,function(t){t[t.UNSET=0]=\"UNSET\",t[t.OK=1]=\"OK\",t[t.ERROR=2]=\"ERROR\"}(c||(exports.SpanStatusCode=c={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":0}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":13}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":20}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":35}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":43}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":56}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":57}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":64}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":68}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":76}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":84}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":92}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":107}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":115}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":129}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":131}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":139}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":147}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":149}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":157}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":172}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":174}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":182}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":192}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":194}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":202}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":221}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":223}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":231}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":239}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":241}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":249}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":264}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":266}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":270}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":272}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":274}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":282}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":6},"generated":{"line":1,"column":304}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":16},"generated":{"line":1,"column":313}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":174,"column":24},"generated":{"line":1,"column":315}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":2},"generated":{"line":1,"column":318}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":9},"generated":{"line":1,"column":325}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":16},"generated":{"line":1,"column":327}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":17},"generated":{"line":1,"column":333}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":175,"column":25},"generated":{"line":1,"column":341}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":6},"generated":{"line":1,"column":344}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":16},"generated":{"line":1,"column":353}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":24},"generated":{"line":1,"column":355}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":184,"column":42},"generated":{"line":1,"column":357}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":2},"generated":{"line":1,"column":360}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":9},"generated":{"line":1,"column":367}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":16},"generated":{"line":1,"column":369}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":17},"generated":{"line":1,"column":375}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":25},"generated":{"line":1,"column":383}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":185,"column":34},"generated":{"line":1,"column":385}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":6},"generated":{"line":1,"column":388}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":16},"generated":{"line":1,"column":397}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":31},"generated":{"line":1,"column":399}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":195,"column":49},"generated":{"line":1,"column":401}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":2},"generated":{"line":1,"column":404}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":9},"generated":{"line":1,"column":411}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":16},"generated":{"line":1,"column":413}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":17},"generated":{"line":1,"column":419}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":32},"generated":{"line":1,"column":434}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":196,"column":41},"generated":{"line":1,"column":436}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":6},"generated":{"line":1,"column":439}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":16},"generated":{"line":1,"column":448}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":204,"column":31},"generated":{"line":1,"column":450}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":2},"generated":{"line":1,"column":453}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":9},"generated":{"line":1,"column":460}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":16},"generated":{"line":1,"column":462}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":17},"generated":{"line":1,"column":468}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":1,"column":483}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":1,"column":486}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":16},"generated":{"line":1,"column":495}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":226,"column":35},"generated":{"line":1,"column":497}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":2},"generated":{"line":1,"column":500}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":9},"generated":{"line":1,"column":507}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":16},"generated":{"line":1,"column":509}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":17},"generated":{"line":1,"column":515}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":227,"column":36},"generated":{"line":1,"column":534}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":6},"generated":{"line":1,"column":537}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":16},"generated":{"line":1,"column":546}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":26},"generated":{"line":1,"column":548}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":238,"column":41},"generated":{"line":1,"column":550}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":2},"generated":{"line":1,"column":553}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":9},"generated":{"line":1,"column":560}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":16},"generated":{"line":1,"column":562}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":17},"generated":{"line":1,"column":568}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":27},"generated":{"line":1,"column":578}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":35},"generated":{"line":1,"column":581}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":239,"column":57},"generated":{"line":1,"column":602}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":116,"column":1},"generated":{"line":1,"column":605}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":116,"column":1},"generated":{"line":1,"column":613}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":116,"column":1},"generated":{"line":1,"column":622}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":1,"column":624}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":633}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":1,"column":636}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":1,"column":638}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":1,"column":640}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":1,"column":649}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":93,"column":2},"generated":{"line":1,"column":652}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":663}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":665}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":667}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":674}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":98,"column":2},"generated":{"line":1,"column":677}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":686}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":688}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":690}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":697}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":700}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":1,"column":709}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":1,"column":711}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":1,"column":713}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":1,"column":722}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":1,"column":725}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":1,"column":736}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":1,"column":738}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":1,"column":740}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":1,"column":749}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":115,"column":2},"generated":{"line":1,"column":752}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":1,"column":763}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":764}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":768}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":776}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":1,"column":785}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":91,"column":20},"generated":{"line":1,"column":787}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":7},"generated":{"line":1,"column":792}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":13},"generated":{"line":1,"column":798}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":35},"generated":{"line":1,"column":800}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":243,"column":44},"generated":{"line":1,"column":802}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":1,"column":810}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":814}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":1,"column":816}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":1,"column":824}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":1,"column":832}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":260,"column":1},"generated":{"line":1,"column":834}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":260,"column":1},"generated":{"line":1,"column":842}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":260,"column":1},"generated":{"line":1,"column":857}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":1,"column":859}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":868}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":1,"column":871}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":1,"column":873}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":1,"column":875}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":1,"column":881}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":250,"column":2},"generated":{"line":1,"column":884}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":1,"column":892}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":1,"column":894}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":1,"column":896}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":1,"column":899}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":255,"column":2},"generated":{"line":1,"column":902}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":1,"column":907}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":1,"column":909}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":1,"column":911}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":1,"column":917}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":259,"column":2},"generated":{"line":1,"column":920}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":1,"column":928}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":929}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":933}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":941}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":12},"generated":{"line":1,"column":956}},{"source":"../../src/interfaces.ts","name":null,"original":{"line":246,"column":26},"generated":{"line":1,"column":958}}],"sources":{"../../src/interfaces.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { context as otContext, trace as otTrace } from \"@opentelemetry/api\";\n\n/**\n * A Tracer.\n */\nexport interface Tracer {\n  /**\n   * Starts a new {@link Span}. Start the span without setting it on context.\n   *\n   * This method does NOT modify the current Context.\n   *\n   * @param name - The name of the span\n   * @param options - SpanOptions used for span creation\n   * @param context - Context to use to extract parent\n   * @returns The newly created span\n   * @example\n   *     const span = tracer.startSpan('op');\n   *     span.setAttribute('key', 'value');\n   *     span.end();\n   */\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span;\n}\n\n/**\n * TraceState.\n */\nexport interface TraceState {\n  /**\n   * Create a new TraceState which inherits from this TraceState and has the\n   * given key set.\n   * The new entry will always be added in the front of the list of states.\n   *\n   * @param key - key of the TraceState entry.\n   * @param value - value of the TraceState entry.\n   */\n  set(key: string, value: string): TraceState;\n  /**\n   * Return a new TraceState which inherits from this TraceState but does not\n   * contain the given key.\n   *\n   * @param key - the key for the TraceState entry to be removed.\n   */\n  unset(key: string): TraceState;\n  /**\n   * Returns the value to which the specified key is mapped, or `undefined` if\n   * this map contains no mapping for the key.\n   *\n   * @param key - with which the specified value is to be associated.\n   * @returns the value to which the specified key is mapped, or `undefined` if\n   *     this map contains no mapping for the key.\n   */\n  get(key: string): string | undefined;\n  /**\n   * Serializes the TraceState to a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   *\n   * @returns the serialized string.\n   */\n  serialize(): string;\n}\n\n/**\n * Represents high resolution time.\n */\nexport declare type HrTime = [number, number];\n\n/**\n * Used to represent a Time.\n */\nexport type TimeInput = HrTime | number | Date;\n\n/**\n * The status for a span.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * The kind of span.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4\n}\n\n/**\n * An Exception for a Span.\n */\nexport declare type Exception =\n  | ExceptionWithCode\n  | ExceptionWithMessage\n  | ExceptionWithName\n  | string;\n\n/**\n * An Exception with a code.\n */\nexport interface ExceptionWithCode {\n  /** The code. */\n  code: string | number;\n  /** The name. */\n  name?: string;\n  /** The message. */\n  message?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a message.\n */\nexport interface ExceptionWithMessage {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message: string;\n  /** The name. */\n  name?: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * An Exception with a name.\n */\nexport interface ExceptionWithName {\n  /** The code. */\n  code?: string | number;\n  /** The message. */\n  message?: string;\n  /** The name. */\n  name: string;\n  /** The stack. */\n  stack?: string;\n}\n\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return otTrace.getSpan(context);\n}\n\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return otTrace.setSpan(context, span);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nexport function setSpanContext(context: Context, spanContext: SpanContext): Context {\n  return otTrace.setSpanContext(context, spanContext);\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return otTrace.getSpanContext(context);\n}\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport interface ContextAPI {\n  /**\n   * Get the currently active context\n   */\n  active(): Context;\n}\n\n/**\n * Returns true of the given {@link SpanContext} is valid.\n * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.\n *\n * @param context - the {@link SpanContext} to validate.\n *\n * @returns true if the {@link SpanContext} is valid, false otherwise.\n */\nexport function isSpanContextValid(context: SpanContext): boolean {\n  return otTrace.isSpanContextValid(context);\n}\n\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(): Tracer;\n/**\n * Retrieves a tracer from the global tracer provider.\n */\nexport function getTracer(name: string, version?: string): Tracer;\nexport function getTracer(name?: string, version?: string): Tracer {\n  return otTrace.getTracer(name || \"azure/core-tracing\", version);\n}\n\n/** Entrypoint for context API */\nexport const context: ContextAPI = otContext;\n\n/** SpanStatusCode */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2\n}\n\n/**\n * An interface that represents a span. A span represents a single operation\n * within a trace. Examples of span might include remote procedure calls or a\n * in-process function calls to sub-components. A Trace has a single, top-level\n * \"root\" Span that in turn may have zero or more child Spans, which in turn\n * may have children.\n *\n * Spans are created by the {@link Tracer.startSpan} method.\n */\nexport interface Span {\n  /**\n   * Returns the {@link SpanContext} object associated with this Span.\n   *\n   * Get an immutable, serializable identifier for this span that can be used\n   * to create new child spans. Returned SpanContext is usable even after the\n   * span ends.\n   *\n   * @returns the SpanContext object associated with this Span.\n   */\n  spanContext(): SpanContext;\n  /**\n   * Sets an attribute to the span.\n   *\n   * Sets a single Attribute with the key and value passed as arguments.\n   *\n   * @param key - the key for this attribute.\n   * @param value - the value for this attribute. Setting a value null or\n   *              undefined is invalid and will result in undefined behavior.\n   */\n  setAttribute(key: string, value: SpanAttributeValue): this;\n  /**\n   * Sets attributes to the span.\n   *\n   * @param attributes - the attributes that will be added.\n   *                   null or undefined attribute values\n   *                   are invalid and will result in undefined behavior.\n   */\n  setAttributes(attributes: SpanAttributes): this;\n  /**\n   * Adds an event to the Span.\n   *\n   * @param name - the name of the event.\n   * @param attributesOrStartTime -  the attributes that will be added; these are\n   *     associated with this event. Can be also a start time\n   *     if type is TimeInput and 3rd param is undefined\n   * @param startTime - start time of the event.\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    startTime?: TimeInput\n  ): this;\n  /**\n   * Sets a status to the span. If used, this will override the default Span\n   * status. Default is {@link SpanStatusCode.UNSET}. SetStatus overrides the value\n   * of previous calls to SetStatus on the Span.\n   *\n   * @param status - the SpanStatus to set.\n   */\n  setStatus(status: SpanStatus): this;\n  /**\n   * Marks the end of Span execution.\n   *\n   * Call to End of a Span MUST not have any effects on child spans. Those may\n   * still be running and can be ended later.\n   *\n   * Do not return `this`. The Span generally should not be used after it\n   * is ended so chaining is not desired in this context.\n   *\n   * @param endTime - the time to set as Span's end time. If not provided,\n   *     use the current time as the span's end time.\n   */\n  end(endTime?: TimeInput): void;\n  /**\n   * Returns the flag whether this span will be recorded.\n   *\n   * @returns true if this Span is active and recording information like events\n   *     with the `AddEvent` operation and attributes using `setAttributes`.\n   */\n  isRecording(): boolean;\n\n  /**\n   * Sets exception as a span event\n   * @param exception - the exception the only accepted values are string or Error\n   * @param time - the time to set as Span's event time. If not provided,\n   *     use the current time.\n   */\n  recordException(exception: Exception, time?: TimeInput): void;\n\n  /**\n   * Updates the Span name.\n   *\n   * This will override the name provided via {@link Tracer.startSpan}.\n   *\n   * Upon this update, any sampling behavior based on Span name will depend on\n   * the implementation.\n   *\n   * @param name - the Span name.\n   */\n  updateName(name: string): this;\n}\n\n/**\n * Shorthand enum for common traceFlags values inside SpanContext\n */\nexport const enum TraceFlags {\n  /** No flag set. */\n  NONE = 0x0,\n  /** Caller is collecting trace information. */\n  SAMPLED = 0x1\n}\n\n/**\n * A light interface that tries to be structurally compatible with OpenTelemetry\n */\nexport interface SpanContext {\n  /**\n   * UUID of a trace.\n   */\n  traceId: string;\n  /**\n   * UUID of a Span.\n   */\n  spanId: string;\n  /**\n   * https://www.w3.org/TR/trace-context/#trace-flags\n   */\n  traceFlags: number;\n  /**\n   * Tracing-system-specific info to propagate.\n   *\n   * The tracestate field value is a `list` as defined below. The `list` is a\n   * series of `list-members` separated by commas `,`, and a list-member is a\n   * key/value pair separated by an equals sign `=`. Spaces and horizontal tabs\n   * surrounding `list-members` are ignored. There can be a maximum of 32\n   * `list-members` in a `list`.\n   * More Info: https://www.w3.org/TR/trace-context/#tracestate-field\n   *\n   * Examples:\n   *     Single tracing system (generic format):\n   *         tracestate: rojo=00f067aa0ba902b7\n   *     Multiple tracing systems (with different formatting):\n   *         tracestate: rojo=00f067aa0ba902b7,congo=t61rcWkgMzE\n   */\n  traceState?: TraceState;\n}\n\n/**\n * Used to specify a span that is linked to another.\n */\nexport interface Link {\n  /** The {@link SpanContext} of a linked span. */\n  context: SpanContext;\n\n  /** A set of {@link SpanAttributes} on the link. */\n  attributes?: SpanAttributes;\n}\n\n/**\n * Attributes for a Span.\n */\nexport interface SpanAttributes {\n  /**\n   * Attributes for a Span.\n   */\n  [attributeKey: string]: SpanAttributeValue | undefined;\n}\n/**\n * Attribute values may be any non-nullish primitive value except an object.\n *\n * null or undefined attribute values are invalid and will result in undefined behavior.\n */\nexport declare type SpanAttributeValue =\n  | string\n  | number\n  | boolean\n  | Array<null | undefined | string>\n  | Array<null | undefined | number>\n  | Array<null | undefined | boolean>;\n\n/**\n * An interface that enables manual propagation of Spans\n */\nexport interface SpanOptions {\n  /**\n   * Attributes to set on the Span\n   */\n  attributes?: SpanAttributes;\n\n  /** {@link Link}s span to other spans */\n  links?: Link[];\n\n  /**\n   * The type of Span. Default to SpanKind.INTERNAL\n   */\n  kind?: SpanKind;\n\n  /**\n   * A manually specified start time for the created `Span` object.\n   */\n  startTime?: TimeInput;\n}\n\n/**\n * Tracing options to set on an operation.\n */\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  /**\n   * OpenTelemetry context to use for created Spans.\n   */\n  tracingContext?: Context;\n}\n\n/**\n * OpenTelemetry compatible interface for Context\n */\nexport interface Context {\n  /**\n   * Get a value from the context.\n   *\n   * @param key - key which identifies a context value\n   */\n  getValue(key: symbol): unknown;\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key - context key for which to set the value\n   * @param value - value to set for the given key\n   */\n  setValue(key: symbol, value: unknown): Context;\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key - context key for which to clear a value\n   */\n  deleteValue(key: symbol): Context;\n}\n"},"lineCount":null}},"error":null,"hash":"4552848bd61545c008fbc75e4649b976","cacheData":{"env":{}}}